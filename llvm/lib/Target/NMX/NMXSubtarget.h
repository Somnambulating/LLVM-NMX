//===-- NMXSubtarget.h - Define Subtarget for the NMX ---------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the NMX specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_NMX_NMXSUBTARGET_H
#define LLVM_LIB_TARGET_NMX_NMXSUBTARGET_H

#include "NMXFrameLowering.h"
#include "NMXISelLowering.h"
#include "NMXInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "NMXGenSubtargetInfo.inc"

extern bool NMXReserveGP;
extern bool NMXNoCpload;

namespace llvm {
class StringRef;

class NMXTargetMachine;

class NMXSubtarget : public NMXGenSubtargetInfo {
  virtual void anchor();

protected:
  enum NMXArchEnum {
    NMX32I,
    NMX32II
  };

  // NMX architecture version
  // Controled by -mcpu in commandline
  NMXArchEnum NMXArchVersion;

  // IsLittle - The target is Little Endian
  bool IsLittle;

  bool EnableOverflow;

  // HasCmp - cmp instructions.
  bool HasCmp;

  // HasSlt - slt instructions.
  bool HasSlt;

  InstrItineraryData InstrItins;

  // Small section is used.
  bool UseSmallSection;

  const NMXTargetMachine &TM;

  Triple TargetTriple;

  const SelectionDAGTargetInfo TSInfo;

  std::unique_ptr<const NMXInstrInfo> InstrInfo;
  std::unique_ptr<const NMXFrameLowering> FrameLowering;
  std::unique_ptr<const NMXTargetLowering> TLInfo;

public:
  bool isPositionIndependent() const;
  const NMXABIInfo &getABI() const;

  // This constructor initializes the data members to match that
  // of the specified triple.
  NMXSubtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
                bool little, const NMXTargetMachine &_TM);

  // Parses features string setting specified
  // subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool isLittle() const { return IsLittle; }
  bool hasNMX32I() const { return NMXArchVersion >= NMX32I; }
  bool isNMX32I() const { return NMXArchVersion == NMX32I; }
  bool hasNMX32II() const { return NMXArchVersion >= NMX32II; }
  bool isNMX32II() const { return NMXArchVersion == NMX32II; }

  // Features related to the presence of specific instructions.
  bool enableOverflow() const { return EnableOverflow; }
  bool disableOverflow() const { return !EnableOverflow; }
  bool hasCmp()   const { return HasCmp; }
  bool hasSlt()   const { return HasSlt; }

  bool useSmallSection() const { return UseSmallSection; }

  bool abiUsesSoftFloat() const;

  bool enableLongBranchPass() const {
    return hasNMX32II();
  }

  unsigned stackAlignment() const { return 8; }

  NMXSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS,
                                                 const TargetMachine &TM);

  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  const NMXInstrInfo *getInstrInfo() const override { return InstrInfo.get(); }
  const TargetFrameLowering *getFrameLowering() const override {
    return FrameLowering.get();
  }
  const NMXRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo->getRegisterInfo();
  }
  const NMXTargetLowering *getTargetLowering() const override {
    return TLInfo.get();
  }
  const InstrItineraryData *getInstrItineraryData() const override {
    return &InstrItins;
  }
};
} // End llvm namespace

#endif
